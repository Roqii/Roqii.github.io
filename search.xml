<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[canvas高清屏下字体和图片模糊的处理方案]]></title>
      <url>/2017/06/07/canvas%E9%AB%98%E6%B8%85%E5%B1%8F%E4%B8%8B%E5%AD%97%E4%BD%93%E5%92%8C%E5%9B%BE%E7%89%87%E6%A8%A1%E7%B3%8A%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p>引入 <a href="http://jondavidjohn.github.io/hidpi-canvas-polyfill/" target="_blank" rel="external"><strong>hidpi-canvas-polyfill</strong></a><br>正常情况下，在高清屏的设备中，任何绘制在 canvas 中的图形（包括文字）都会出现模糊的问题。上面这个 polyfill 就是为了解决这个问题。</p>
<p>但是它没有处理图片</p>
<h3 id="接下来，修改绘制图片的代码"><a href="#接下来，修改绘制图片的代码" class="headerlink" title="接下来，修改绘制图片的代码"></a>接下来，修改绘制图片的代码</h3><p>将 init 函数修改成下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">function init() &#123;</div><div class="line">    var canvas = document.querySelector(&apos;canvas&apos;);</div><div class="line">    var ctx = canvas.getContext(&apos;2d&apos;);</div><div class="line"></div><div class="line">    // polyfill 提供了这个方法用来获取设备的 pixel ratio</div><div class="line">    var getPixelRatio = function(context) &#123;</div><div class="line">        var backingStore = context.backingStorePixelRatio ||</div><div class="line">            context.webkitBackingStorePixelRatio ||</div><div class="line">            context.mozBackingStorePixelRatio ||</div><div class="line">            context.msBackingStorePixelRatio ||</div><div class="line">            context.oBackingStorePixelRatio ||</div><div class="line">            context.backingStorePixelRatio || 1;</div><div class="line">    </div><div class="line">        return (window.devicePixelRatio || 1) / backingStore;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    var ratio = getPixelRatio(ctx);</div><div class="line">    </div><div class="line">    // 注意，这里的 width 和 height 变成了 width * ratio 和 height * ratio</div><div class="line">    ctx.drawImage(document.querySelector(&apos;img&apos;), 0, 0, 300 * ratio, 90 * ratio);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原文原稿：<a href="https://segmentfault.com/a/1190000003730246" target="_blank" rel="external">https://segmentfault.com/a/1190000003730246</a></p>
<p>注:修改了部分文字</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP数据接收变量$_GET、$_POST 、$_REQUEST区别]]></title>
      <url>/2017/06/05/PHP%E6%95%B0%E6%8D%AE%E6%8E%A5%E6%94%B6%E5%8F%98%E9%87%8F$_GET%E3%80%81$_POST%20%E3%80%81$_REQUEST%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>1、$_GET 变量</p>
<p>预定义的 $_GET 变量用于收集来自 method=”get” 的表单中的值。<br>从带有 GET 方法的表单发送的信息，对任何人都是可见的（会显示在浏览器的地址栏），并且对发送信息的量也有限制。<br>$_GET 变量的安全性不如$_POST 。</p>
<p>2、$_POST 变量</p>
<p>预定义的 $_POST 变量用于收集来自 method=”post” 的表单中的值。</p>
<p>从带有 POST 方法的表单发送的信息，对任何人都是不可见的（不会显示在浏览器的地址栏），并且对发送信息的量也没有限制。</p>
<p>注释：然而，默认情况下，POST 方法的发送信息的量最大值为 8 MB（可通过设置 php.ini 文件中的 post_max_size 进行更改）。</p>
<p>主要区别如下：<br>① 安全性 post&gt;get<br>② 数据传输大小 [浏览器]post&gt;get<br>③ 保存到收藏夹 get比较方便.</p>
<p>3、PHP $_REQUEST 变量</p>
<p>预定义的 $_REQUEST 变量包含了 $_GET、$_POST 和 $_COOKIE 的内容。</p>
<p>$_REQUEST 变量可用来收集通过 GET 和 POST 方法发送的表单数据。<br>$_REQUEST 变量既可以收集GET方法发送的数据，也可以接受POST方法接受的数据。</p>
<p>注意事项:</p>
<ol>
<li>不要经常使用$_REQUEST,</li>
<li>如果不确定_GET/POST<br>你接收数据时候，可以这样</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if($_SERVER[&apos;REQUEST_METHOD&apos;] == &quot;POST&quot;) &#123;</div><div class="line">        echo $_POST[&quot;username&quot;].$_POST[&quot;password&quot;];</div><div class="line">&#125; else if($_SERVER[&apos;REQUEST_METHOD&apos;]==&quot;GET&quot;)&#123;</div><div class="line">        echo $_POST[&quot;username&quot;].$_POST[&quot;password&quot;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[去除默认浏览器属性]]></title>
      <url>/2017/06/03/%E5%8E%BB%E9%99%A4%E9%BB%98%E8%AE%A4%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,textarea,p,blockquote,th,td<br>{<br>            margin:0;padding:0<br>}</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[JS获取当前时间戳方法]]></title>
      <url>/2017/06/01/data/</url>
      <content type="html"><![CDATA[<p>var timer = new Date.parse(new Date());<br>结果1496391194000</p>
<p>var timer = new Date().valueOf();<br>结果1496391194283</p>
<p>var timer = new Date().getTime();<br>结果1496391194283</p>
]]></content>
      
        
    </entry>
    
  
  
</search>
